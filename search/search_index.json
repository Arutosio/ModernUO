{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"building-server/","text":"Creating a build \u00b6 The server software must be built before it can be run. Windows OSX/Linux Using windows terminal , git bash , or powershell , run: ./publish.cmd <release | debug> <os> <arch> Using terminal , run: ./publish.sh <release | debug> <os> <arch> os ( Optional ) The operating system to build the server against. If not specified then the server will be built for the same operating system. win osx linux arch ( Optional ) The architecture to build the server against. If not specified then the server will be built for x64. x64 arm64","title":"Creating a build"},{"location":"building-server/#creating-a-build","text":"The server software must be built before it can be run. Windows OSX/Linux Using windows terminal , git bash , or powershell , run: ./publish.cmd <release | debug> <os> <arch> Using terminal , run: ./publish.sh <release | debug> <os> <arch> os ( Optional ) The operating system to build the server against. If not specified then the server will be built for the same operating system. win osx linux arch ( Optional ) The architecture to build the server against. If not specified then the server will be built for x64. x64 arm64","title":"Creating a build"},{"location":"installation/","text":"Installation \u00b6 Windows OSX Linux Prerequisites \u00b6 Download and install the latest .NET 7 SDK Download and install from here Tip Use Windows Terminal as your command prompt. Install ModernUO \u00b6 Navigate to the folder where you want to install ModernUO. Using Windows Terminal run: git clone https://github.com/modernuo/modernuo cd modernuo Prerequisites \u00b6 Download and install the latest .NET 7 SDK . Using terminal , install homebrew and git: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh ) \" brew install git Install ModernUO \u00b6 Using terminal , navigate to the folder where you want to install ModernUO and run: git clone https://github.com/modernuo/modernuo cd modernuo Prerequisites \u00b6 Download and install the latest .NET 7 SDK . Using bash , install git: sudo apt update && sudo apt install git Note The command to install git might be different for your flavor of linux. Consult your local Google search for answers. Install ModernUO \u00b6 Using bash , navigate to the folder where you want to install ModernUO and run: git clone https://github.com/modernuo/modernuo cd modernuo","title":"Installation"},{"location":"installation/#installation","text":"Windows OSX Linux","title":"Installation"},{"location":"readme/","text":"ModernUO Website \u00b6 Development \u00b6 Install Python's pip package manager Install MkDocs: pip install mkdocs Install Required Extensions pip install pymdown-extensions pip install mkdocs-material Launch development server: mkdocs","title":"ModernUO Website"},{"location":"readme/#modernuo-website","text":"","title":"ModernUO Website"},{"location":"starting-server/","text":"Starting the server \u00b6 Now that the software has been built, all you need to do is run it! Everything is run from the Distribution folder. Windows OSX/Linux Using windows terminal , git bash , or powershell , run: cd Distribution ModernUO.exe Using terminal , run: cd Distribution dotnet run ModernUO.dll","title":"Starting the server"},{"location":"starting-server/#starting-the-server","text":"Now that the software has been built, all you need to do is run it! Everything is run from the Distribution folder. Windows OSX/Linux Using windows terminal , git bash , or powershell , run: cd Distribution ModernUO.exe Using terminal , run: cd Distribution dotnet run ModernUO.dll","title":"Starting the server"},{"location":"scripting-guide/serialization/","text":"Serialization / Savings \u00b6 Generic persistence Codegen Persistence.Serialize and Persistence.Deserialize is replaced with GenericPersistence class Example of how to persist a custom system. namespace Server.ExampleSystem { public static class ExampleSerialization { public static void Configure () { GenericPersistence . Register ( \"ExampleSystem\" , Serialize , Deserialize ); } public static void Serialize ( IGenericWriter writer ) { // Do serialization here writer . WriteEncodedInt ( 0 ); // version } public static void Deserialize ( IGenericReader reader ) { // Do deserialization here var version = reader . ReadEncodedInt (); } } } Basic info \u00b6 ModernUO can programatically generate migrations. This feature is based on internal C# Source generators More info Old way of serializing objects: public class ExampleItem : Item { public string ExampleText { get ; set ; } [Constructible] public ExampleItem () : base ( 0 ) { } public ExampleItem ( Serial serial ) : base ( serial ) { } public override void Serialize ( IGenericWriter writer ) { base . Serialize ( writer ); writer . WriteEncodedInt ( 0 ); //Version writer . Write ( ExampleText ); } public override void Deserialize ( IGenericReader reader ) { base . Deserialize ( reader ); var version = reader . ReadEncodedInt (); ExampleText = reader . ReadString (); } } Same class serialized with codegen [Serializable(0)] public partial class ExampleItem : Item { [SerializableField(0)] public string ExampleText { get ; set ; } [Constructible] public ExampleItem () : base ( 0 ) { } } Step by step \u00b6 Add SerializableAttribute(versionNumber) to your class and make it partial [Serializable(0)] public partial class ExampleItem : Item Delete constructors with Serial serial , Serialize and Deserialize methods. Add SerializableField(fieldOrder) attribute to all field you want to serialize. [SerializableField(0)] public string ExampleText { get ; set ; } Build project \"Run Schema Migrations\". ModernUO will create migration files for you. In this case \"Server.Items.ExampleItem.v0.json\" and \"Server.Items.ExampleItem.Serialization.cs\" These files contains all information and classes needed for MUO to serialize/deserialize your objects. Migrations \u00b6 When new field is added to serialization, you need to increment versionNumber and make migration files. Here is little example. New class code will look like this: [Serializable(1)] public partial class ExampleItem : Item { [SerializableField(0)] public string ExampleText { get ; set ; } [SerializableField(1)] public string AddedExampleTest { get ; set ; } [Constructible] public ExampleItem () : base ( 0 ) { } } After building \"Run Schema Migrations\" project, MUO will generate V0Content in serialization class. This Content contains all fields from V0. Now create MigrateFrom for each version you make, in this case V0. Tip When you have more versions, create standalone file for migrations only. For example \"ExampleItem.Migrations.cs\" private void MigrateFrom ( V0Content content ) { ExampleText = content . ExampleText ; } Your migration is now completed. Migrating from pre-codegen \u00b6 For migration from pre-codegen code, use method private void Deserialize ( IGenericReader reader , int version ) this method is called when codegen doesnt have VXContent for deserialized object or version of Content is lower than deserialized. In this method you can make old fashioned deserialization as before codegen. After deserialization \u00b6 For some code changes after world load, you can use AfterDeserializationAttribute. [AfterDeserialization] private void AfterDeserialization () { // Some code here } Embedded serialization \u00b6 Sometimes you need to serialize object inside object. For this you should use \"EmbeddedSerializableAttribute\". Nice example to understand it is \"AquariumState\"","title":"Serialization"},{"location":"scripting-guide/serialization/#serialization-savings","text":"Generic persistence Codegen Persistence.Serialize and Persistence.Deserialize is replaced with GenericPersistence class Example of how to persist a custom system. namespace Server.ExampleSystem { public static class ExampleSerialization { public static void Configure () { GenericPersistence . Register ( \"ExampleSystem\" , Serialize , Deserialize ); } public static void Serialize ( IGenericWriter writer ) { // Do serialization here writer . WriteEncodedInt ( 0 ); // version } public static void Deserialize ( IGenericReader reader ) { // Do deserialization here var version = reader . ReadEncodedInt (); } } }","title":"Serialization / Savings"},{"location":"scripting-guide/timers/","text":"Timers \u00b6 ModernUO completely changed the timer system to use an optimized data structure called a timer wheel. This will allow shards to add thousands of timers without slowing down the server. Traditionally the timer system used a thread and locked to add/remove/process timers. All of this is gone. With the new timer system there is no TimerPriority. This can be deleted entirely from your scripts.","title":"Timers"},{"location":"scripting-guide/timers/#timers","text":"ModernUO completely changed the timer system to use an optimized data structure called a timer wheel. This will allow shards to add thousands of timers without slowing down the server. Traditionally the timer system used a thread and locked to add/remove/process timers. All of this is gone. With the new timer system there is no TimerPriority. This can be deleted entirely from your scripts.","title":"Timers"}]}